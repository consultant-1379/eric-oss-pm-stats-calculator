#
# COPYRIGHT Ericsson 2024
#
# The copyright to the computer program(s) herein is the property of
# Ericsson Inc. The programs may be used and/or copied only with written
# permission from Ericsson Inc. or in accordance with the terms and
# conditions stipulated in the agreement/contract under which the
# program(s) have been supplied.
#

modelVersion: 2.0

description: "Ericsson Java Spring Boot Main calculation service in the PM Stats Calculation Handling application. This is to read PM data from Kafka and calculate KPIs based on definitions provided by the auto apps"

# See image catalog: https://confluence.lmera.ericsson.se/display/ACD/ADP+CICD+Docker+Image+Catalog
docker-images:
  - adp-asciidoc-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-asciidocbuilder:${env.ASCII_DOC_BUILDER_TAG}
  - adp-doc-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-docbuilder:${env.DOC_BUILDER_TAG}
  - adp-helm-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/common-library-adp-helm-dr-check:${env.HELM_DR_CHECK_TAG}
  - adp-helm-kubectl: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-py3kubehelmbuilder:${env.HELM_KUBECTL_TAG}
  - adp-image-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-image-dr-check:${env.IMAGE_DR_CHECK_TAG}
  - adp-maven-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-java17mvnbuilder:${env.MVN_BUILDER_TAG}
  - adp-release-auto: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-adp-release-auto:${env.RELEASE_AUTO_TAG}
  - elib-make-utilities: ${elib-make-subpath}-oss-drop/eric-elib/elib_makeutilities:${env.ELIB_MAKE_UTILITIES_TAG}
  - bth-linter: armdocker.rnd.ericsson.se/proj-eric-oss-drop/eric-bth/eric-bth-spectral-linter:${env.BTH_LINTER_TAG}
  - sdk-validator: armdocker.rnd.ericsson.se/proj-eric-oss-sdkschema-drop/eric-oss-sdkschema-validator:${env.SDKSCHEMA_VALIDATOR_TAG}
# VA tools images
  - hadolint-scan: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/hadolint-scan:${env.HADOLINT_TAG}
  - trivy-inline-scan: ${trivy-image}:${env.TRIVY_TAG}
  - grype-scan: ${anchore-grype-image}:${env.ANCHORE_TAG}
  - va-scan-kubesec: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubesec:${env.KUBESEC_TAG}
  - va-scan-kubeaudit: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubeaudit:${env.KUBEAUDIT_TAG}
  - va-scan-kubehunter: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubehunter:${env.KUBEHUNTER_TAG}

import:
  common: common-properties.yaml

# List of constants
properties:
  - elib-make-subpath: armdocker.rnd.ericsson.se/proj-eric
  - image-registry-path: armdocker.rnd.ericsson.se/proj-eric-oss
  - image-secret: armdocker
  - image-dev-repopath: ${image-registry-path}-dev
  - image-ci-repopath: ${image-registry-path}-ci-internal
  - image-drop-repopath: ${image-registry-path}-drop
  - image-full-name: ${image-drop-repopath}/${common.docker-image-name}
  - image-ci-full-name: ${image-ci-repopath}/${common.docker-image-name}
  - project-subpath: proj-eric-oss

  # Helm Chart name must follow the pattern: eric-[a-z0-9]{1,5}-[a-z0-9-]{1,30}
  - helm-chart-repo-server-path: https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss
  - helm-chart-dev-repopath: ${helm-chart-repo-server-path}-dev-helm
  - helm-chart-ci-repopath: ${helm-chart-repo-server-path}-ci-internal-helm
  - helm-chart-release-repo: ${helm-chart-repo-server-path}-released-helm-local

  # Functional ID to push to Gerrit repo
  - git-repo-path: OSS/com.ericsson.oss.air/eric-oss-pm-stats-calculator
  - git-repo-url: https://gerrit-gamma.gic.ericsson.se/${git-repo-path}.git

  # Generic repository for publishing artifacts such as documentation
  - generic-drop-repo: ${helm-chart-repo-server-path}-drop-generic

  - enabled-helm-design-rules: "-DhelmDesignRule.config.drHc011=enable -DhelmDesignRule.config.DR-D1120-045-AD=enable"
  # Temporarily disabled rules, till the fix could be submitted
  - disabled-helm-design-rules: "-DhelmDesignRule.config.DR-D1123-113=disable -DhelmDesignRule.config.DR-D470222-010=disable"

  # FOSSA
  - fossa-server-endpoint: https://scasfossa.internal.ericsson.com/
  - fossa-project-name: ${common.helm-chart-name}
  - fossa-report-name: fossa-report.json
  - fossa-team-name: ${common.fossa-team-name}
  - docker-params: "--workdir ${env.PWD}"

  # Integration test
  - helm-integration-docker-dir: ./testsuite/src/test/docker/helm-integration
  - helm-test-local-dir: ./helm-test-local

  # VA IMAGES
  - image-to-scan: ${image-ci-full-name}:${var.version}
  - anchore-grype-image: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-image-scanning-grype
  - trivy-image: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/trivy-inline-scan

  # Marketplace Documentation Location
  - doc-repo-base-path: https://arm.seli.gic.ericsson.se/artifactory
  - doc-arm-dev-repo: ${doc-repo-base-path}/proj-eric-oss-dev-generic-local/${common.helm-chart-name}
  - doc-arm-ci-repo: ${doc-repo-base-path}/proj-eric-oss-ci-internal-generic-local/${common.helm-chart-name}
  - doc-arm-drop-repo: ${doc-repo-base-path}/proj-eric-oss-drop-generic-local/${common.helm-chart-name}
  - doc-arm-release-repo: ${doc-repo-base-path}/proj-eric-oss-released-generic-local/${common.helm-chart-name}

# import environment variables (For example: Jenkins parameters)
env:
  - DOCKER_NETWORK (default=--network host)
  - HOME
  - MAVEN_CLI_OPTS (default=-Duser.home=${env.HOME} -B)
  - MAVEN_OPTS (default=-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn)
  - PWD
  - RELEASE (default=false)
  - DOCKER_VOLUME_MAPPING_PASSWD (default=--volume ${env.HOME}/mypasswd:/etc/passwd:ro)
  - PROJ_MVN (default=/proj/mvn)
  - BRANCH

  # Kubernetes
  - COLLECT_LOGS_SCRIPT_LOCATION (default="https://arm.sero.gic.ericsson.se/artifactory/proj-ADP_GS_Support_FTP-generic-local/collect_ADP_logs")
  - COLLECT_LOGS_SCRIPT_FILE_NAME (default="collect_ADP_logs.sh")
  - COLLECT_LOGS_SINCE_RELATIVE_TIME (default="2h")
  - COLLECT_LOGS_DIR (default=./k8s-logs)
  - ENABLE_HELM_V3 (default=true)
  - HELM_INSTALL_TIMEOUT (default=5m0s)
  - HELM_RELEASE (default=${common.helm-chart-name}-release)
  - HELM_TEST_TIMEOUT (default=5m0s)
  - HELM_TEST_INTEGRATION_TIMEOUT (default=30m0s)
  - HELM_VERSION (default="3.5.2")
  - HELM_REPO_CREDENTIALS (default=./repositories.yaml)
  - K8S_NAMESPACE (default=${common.helm-chart-name}-${var.commithash})
  - KUBECONFIG (default=${env.HOME}/.kube/config)
  - BUILD_DIR (default=./build)
  - KAAS_INFO_FILE (default=${env.BUILD_DIR}/kaas-info.log)
  - CHECKSTYLE_LOG_FILE (default=${env.BUILD_DIR}/checkstyle.log)

  # Credentials
  - DOCKER_CONFIG (default=$HOME/.docker/config.json)
  - ERIDOC_USERNAME
  - ERIDOC_PASSWORD
  - GERRIT_USERNAME
  - GERRIT_PASSWORD
  - GERRIT_CHANGE_NUMBER
  - GERRIT_CHANGE_URL
  - JIRA_USERNAME
  - JIRA_PASSWORD
  - SELI_ARTIFACTORY_REPO_USER
  - SELI_ARTIFACTORY_REPO_PASS
  - SERO_ARTIFACTORY_REPO_USER
  - SERO_ARTIFACTORY_REPO_PASS

  # ADP Marketplace
  - ADP_PORTAL_API_KEY

  # Default docker image tags
  - ASCII_DOC_BUILDER_TAG (default=latest)
  - DOC_BUILDER_TAG (default=2.3.0-latest)
  - ELIB_MAKE_UTILITIES_TAG (default=latest)
  - HELM_DR_CHECK_TAG (default=latest)
  - HELM_KUBECTL_TAG (default=latest)
  - IMAGE_DR_CHECK_TAG (default=latest)
  - MVN_BUILDER_TAG (default=latest)
  - RELEASE_AUTO_TAG (default=latest)
  - BTH_LINTER_TAG (default=latest)
  - SDKSCHEMA_VALIDATOR_TAG (default=latest)

  # SonarQube
  - SONAR_AUTH_TOKEN
  - SONAR_HOST_URL
  - SONAR_BRANCH (default="master")

  # REST2HTML
  #Document Number of the REST Container file (The decimal class for a container is 190 89-)
  - REST2HTML_NUM (default="190 89-CAAH 101 091/1")
  - OPEN_API_MVN_MODULE (default="eric-oss-pm-stats-calculator-spring-boot")

  # BTH Linter
  - OPEN_API_SPEC_DIRECTORY (default="src/main/resources/v1")

  # FOSSA
  - FOSSA_API_KEY
  - BAZAAR_USER (default=ossadmin)
  - BAZAAR_TOKEN
  - MUNIN_TOKEN
  - SCAS_TOKEN

  # VA Tools docker image tags
  - HADOLINT_TAG (default=latest)
  - TRIVY_TAG (default=latest)
  - ANCHORE_TAG (default=latest)
  - KUBESEC_TAG (default=latest)
  - KUBEAUDIT_TAG (default=latest)
  - KUBEHUNTER_TAG (default=latest)

  # X-RAY
  - XRAY_USER
  - XRAY_APIKEY

  # VHUB
  - VHUB_API_TOKEN

# Variables, set by below tasks
var:
  - commithash
  - commithash-full
  - commit-author
  - commit-email
  - docker-config-basepath
  - image-registry
  - helm-chart-repo-internal
  - image-full-name-internal
  - image-repopath-internal
  - image-repopath-drop
  - pom-version
  - rest2html-optional
  - revision
  - rstate
  - version
  - version-prefix
  - image-dr-vm-args
  - kaas-version
  - kaas-current-context
  - save-namespace
  - resultcode_hadolint_check
  - va-report-cmd
  - va-report-exit-code

# Rules to execute
rules:

  # Integrated rule to execute everything locally (init-dev)
  release:
    - rule: clean
    - rule: init-dev
    - rule: lint
    - rule: build
    - rule: test
    - rule: image
    - rule: image-dr-check
    - rule: package
    - rule: package-jars
    - rule: k8s-test

  # Clean workspace
  clean:
    - task: rm
      cmd:
        - rm -rf .bob/
        - rm -rf build/
        - rm -rf k8s-logs/
        - rm -f artifact.properties
        - rm -f ${env.OPEN_API_SPEC_DIRECTORY}/rest_conversion_log.txt
        - rm -f ${env.OPEN_API_SPEC_DIRECTORY}/rest2html*.zip
        - rm -f helm-install-dry-run.log
        - rm -rf *${fossa-report-name}
    - task: mvn-clean
      docker-image: adp-maven-builder
      docker-flags: &mvn-docker-flags
        - ${env.DOCKER_NETWORK}
        - "--env MAVEN_OPTS=${env.MAVEN_OPTS}"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.PROJ_MVN}:/proj/mvn"
        - "--volume ${env.HOME}:${env.HOME}"
      cmd: mvn ${env.MAVEN_CLI_OPTS} clean

  # Common tasks for all init rules
  init-common:
    - task: version
      docker-image: adp-release-auto
      docker-flags:
        - "--env RELEASE"
      cmd: generate-version --is-release ${env.RELEASE} --output version
    - task: rstate
      docker-image: adp-release-auto
      cmd: get_rstate.py ${var.version} > .bob/var.rstate
    - task: commit
      docker-image: adp-release-auto
      cmd:
        - git rev-parse --short HEAD > .bob/var.commithash
        - git rev-parse HEAD > .bob/var.commithash-full
        - git log -1 --format='%aN' > .bob/var.commit-author
        - git log -1 --format='%aE' > .bob/var.commit-email
    - task: pom-version
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags
      cmd: mvn ${env.MAVEN_CLI_OPTS} help:evaluate -Dexpression=project.version -q -DforceStdout > .bob/var.pom-version
    - task: create-temp-dir
      cmd: mkdir -p ${env.BUILD_DIR}
#      TODO: temporary turn off, fix it in IDUN-118545
#    - task: generate-openapi-doc
#      docker-image: adp-maven-builder
#      docker-flags: *mvn-docker-flags
#      cmd: mvn ${env.MAVEN_CLI_OPTS} clean package -pl ${env.OPEN_API_MVN_MODULE} --also-make -DskipTests
    - task: va-report-cmd
      docker-image: adp-release-auto
      docker-flags:
        - --env VHUB_API_TOKEN
      cmd: echo "va-report --set version=${var.version}
        --config ${env.PWD}/config/va-report.config
        --output ${env.PWD}/build/va-reports/Vulnerability_Report_2.0.md
        --fail-level-critical true
        --md
        --debug" > .bob/var.va-report-cmd

  # Dev Tasks: only used by manually publishing development/black builds by developers
  init-dev:
    - rule: init-common
    - task: preliminary-revision # For example: PA1
      cmd: RSTATE=$(echo ${var.rstate} | tr -d [0-9]) && echo P${RSTATE:0-1}1 > .bob/var.revision
    - task: image-repopath-internal
      cmd: echo "${image-dev-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-registry
      cmd: echo "${image-dev-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-dev-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-dev-repopath}" > .bob/var.helm-chart-repo-internal
    - task: image-dr-vm-args
      cmd: echo " -DimageDesignRule.config.DR-D470203-041-A=disable -DimageDesignRule.config.DR-D470203-050-A=disable" > .bob/var.image-dr-vm-args

  # CI-Internal Tasks: used by CI to use as temporary storage for testing, only CI user has write access.
  init-precodereview:
    - rule: init-common
    - task: update-pom-version
      cmd: sh -c 'find ./ -name 'pom.xml' -type f -exec sed -i -e "0,/${var.pom-version}/s//${var.version}/" {} \; '
    - task: preliminary-revision # For example: PA1
      cmd: RSTATE=$(echo ${var.rstate} | tr -d [0-9]) && echo P${RSTATE:0-1}1 > .bob/var.revision
    - task: image-repopath-internal
      cmd: echo "${image-ci-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-registry
      cmd: echo "${image-ci-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-ci-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-ci-repopath}" > .bob/var.helm-chart-repo-internal
    - task: image-dr-vm-args
      cmd: echo " -DimageDesignRule.config.DR-D470203-041-A=disable -DimageDesignRule.config.DR-D470203-050-A=disable" > .bob/var.image-dr-vm-args

  # Drop level tasks: used by CI to publish artifacts after successful CI pipeline execution for a drop build
  init-drop:
    - rule: init-common
    - task: update-pom-version
      cmd: sh -c 'find ./ -name 'pom.xml' -type f -exec sed -i -e "0,/${var.pom-version}/s//${var.version}/" {} \; '
    - task: full-revision # For example: A (Note: The Letters I O P Q R W must never be used for Document Revisioning.
      cmd:
        - RSTATE=$(echo ${var.rstate} | tr -d [0-9]) && echo ${RSTATE:0-1} > .bob/var.revision
        - echo -cpi > .bob/var.rest2html-optional
    - task: image-repopath-internal
      cmd: echo "${image-ci-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-repopath-drop
      cmd: echo "${image-drop-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-drop
    - task: image-registry
      cmd: echo "${image-ci-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-ci-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-ci-repopath}" > .bob/var.helm-chart-repo-internal
    - task: adp-artifacts-properties
      docker-image: adp-release-auto
      cmd: generate-adp-artifacts
        --chart-name ${common.helm-chart-name}
        --chart-version ${var.version}
        --chart-repo ${helm-chart-release-repo}
        --image-name ${common.docker-image-name}
        --image-version ${var.version}
        --image-repo "${var.image-registry}/${var.image-repopath-drop}"
    - task: write-git-details
      cmd:
        - echo "GIT_TAG=$(git log -1 --pretty=format:'%h')" >> artifact.properties
        - echo "GIT_COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')" >> artifact.properties
        - echo "GIT_COMMIT_AUTHOR_EMAIL=$(git log -1 --format='%aE')" >> artifact.properties
        - echo "GIT_COMMIT_SUMMARY=$(git log -1 --pretty=format:'%s')" >> artifact.properties
        - echo "GERRIT_CHANGE_URL=${env.GERRIT_CHANGE_URL}" >> artifact.properties
    - task: image-dr-vm-args
      cmd: echo "" > .bob/var.image-dr-vm-args

  lint:
    - task: markdownlint
      docker-image: adp-doc-builder
      cmd: bash -c 'markdownlint --config ci/markdown-config.yaml $(git ls-files -- \*\doc\*\.md | cat | xargs)'
    - task: vale
      docker-image: adp-doc-builder
      cmd: bash -c 'vale --output line --no-wrap $(git ls-files -- \*\doc\*\.md | cat | xargs)'
    - task: helm
      docker-image: adp-helm-dr-check
      docker-flags:
        - "--env ENABLE_HELM_V3=true"
        - ${env.DOCKER_NETWORK}
      cmd: sh -c "helm3 dependency update charts/${common.helm-chart-name} && helm3 lint charts/${common.helm-chart-name}"
    - task: helm-chart-check
      docker-image: adp-helm-dr-check
      cmd: helm-dr-check -DhelmDesignRule.feature.dependency=1 --helm-chart charts/${common.helm-chart-name} ${enabled-helm-design-rules} ${disabled-helm-design-rules} --helm-v3 --output .bob/
    - task: license-check
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags
      cmd: mvn ${env.MAVEN_CLI_OPTS} license:check -DskipTests=true
    - task: checkstyle
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags
      cmd: mvn ${env.MAVEN_CLI_OPTS} compile checkstyle:checkstyle -DskipTests=true >> ${env.CHECKSTYLE_LOG_FILE}
    - task: oas-bth-linter
      docker-image: bth-linter
      docker-flags:
        - "--env OPEN_API_SPEC_DIRECTORY=${env.OPEN_API_SPEC_DIRECTORY}"
        - "--env OUTPUT_DIRECTORY=.bob"
      cmd: /bth-linter.sh
    - task: metrics-check
      cmd:
        - . ./ci/scripts/metrics-checker.sh --chmod=+x && checkValuesYAML ${common.helm-chart-name}
        - . ./ci/scripts/metrics-checker.sh && checkServiceYAML ${common.helm-chart-name}
        - . ./ci/scripts/metrics-checker.sh && checkDeploymentYAML ${common.helm-chart-name}
        - . ./ci/scripts/metrics-checker.sh && checkHelperTPL ${common.helm-chart-name}
        - . ./ci/scripts/metrics-checker.sh && checkPomXML ${common.helm-chart-name}
        - . ./ci/scripts/metrics-checker.sh && passOrFailCheck
  generate:
    - rule: rest-2-html

  # Generate HTML output files from OpenAPI spec
  rest-2-html:
    - task: check-has-open-api-been-modified
      cmd:
        - if [ -z "$(git diff --name-status HEAD~ | grep ${env.OPEN_API_SPEC_DIRECTORY}/eric-oss-pm-stats-calculator-openapi.yaml)" ]; then
            echo "NO modifications have been made to the OpenAPI spec.";
            echo false > .bob/var.has-openapi-spec-been-modified;
          else
            echo "There HAS been modifications made to the OpenAPI spec.";
            echo true > .bob/var.has-openapi-spec-been-modified;
          fi
    - task: zip-open-api-doc
      docker-image: elib-make-utilities
      cmd:
        - ls -ltr ${env.OPEN_API_SPEC_DIRECTORY}/
        - sh -c 'cd ${env.OPEN_API_SPEC_DIRECTORY}/ && zip -r eric-oss-pm-stats-calculator-openapi.zip eric-oss-pm-stats-calculator-openapi.yaml'
        - ls -ltr ${env.OPEN_API_SPEC_DIRECTORY}/
    - task: generate-html-output-files
      docker-image: elib-make-utilities
      cmd:
        - ls -ltr
        - /usr/src/elib/makerestc
           -inp ${env.OPEN_API_SPEC_DIRECTORY}/eric-oss-pm-stats-calculator-openapi.zip
           -oud ${env.OPEN_API_SPEC_DIRECTORY}/
           -rev ${var.revision}
           -inf ${var.commit-email}
           -num ${env.REST2HTML_NUM}
           -cre ${var.commit-author}
           -app ${var.commit-author}
           -d
           ${var.rest2html-optional}
        - ls -ltr
        - cat ${env.OPEN_API_SPEC_DIRECTORY}/rest_conversion_log.txt

  # Generate documents
  generate-docs:
    # Convert markdown docs to pdf format for EriDoc
    - task: markdown-to-pdf
      docker-image: adp-release-auto
      cmd: 'doc-handler generate --config config/handler-pdf-config.yaml
                                 --output ./build/doc/pdf
                                 --stylesheet doc/stylesheet/stylesheet.css
                                 --format pdf'
    # Convert documentation to ZIP file for marketplace
    - task: prepare-for-marketplace
      docker-image: adp-release-auto
      cmd: 'doc-handler generate --config config/marketplace_config.yaml
                                 --output ./build/doc/html
                                 --format html
                                 --zip'

  # Upload zip package documents to ARM and refresh adp portal
  marketplace-upload-dev:
    - task: upload-doc-to-arm
      docker-image: adp-release-auto
      cmd: marketplace upload --arm-api-token ${env.SELI_ARTIFACTORY_REPO_PASS}
        --arm-url ${doc-arm-dev-repo}
        --config config/marketplace_upload_config.yaml
        --dev
        --debug
        --refresh
        --portal-token ${env.ADP_PORTAL_API_KEY}

  marketplace-upload-release:
    - task: upload-doc-to-arm
      docker-image: adp-release-auto
      cmd: marketplace upload --arm-api-token ${env.SELI_ARTIFACTORY_REPO_PASS}
        --arm-url ${doc-arm-release-repo}
        --config config/marketplace_upload_config.yaml
        --version ${var.version}
        --debug
        --refresh
        --portal-token ${env.ADP_PORTAL_API_KEY}

  # Upload documents to EricDoc
  eridoc-upload-documents:
    # Dryrun upload documents to EriDoc
    - task: eridoc-upload-dryrun
      docker-image: adp-release-auto
      docker-flags:
        - --env ERIDOC_USERNAME
        - --env ERIDOC_PASSWORD
      cmd: eridoc upload
        --config ./config/eridoc_config.yaml
        --debug
        --no-validate-certificates
        --dry-run
    # Upload documents to EriDoc
    - task: eridoc-upload
      docker-image: adp-release-auto
      docker-flags:
        - --env ERIDOC_USERNAME
        - --env ERIDOC_PASSWORD
      cmd: eridoc upload
        --config ./config/eridoc_config.yaml
        --debug
        --no-validate-certificates
    # Approve uploaded documents in EriDoc
    - task: eridoc-approve
      docker-image: adp-release-auto
      docker-flags:
        - --env ERIDOC_USERNAME
        - --env ERIDOC_PASSWORD
      cmd: eridoc approve
        --config ./config/eridoc_config.yaml
        --debug
        --no-validate-certificates

  # Build java source code and package jar file, no need image building at this stage
  build:
    - task: mvn-package
      docker-image: adp-maven-builder
      docker-flags: &mvn-docker-flags-with-creds
        - ${env.DOCKER_NETWORK}
        - "--env MAVEN_OPTS=${env.MAVEN_OPTS}"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume ${env.PROJ_MVN}:/proj/mvn"
        - "--env SELI_ARTIFACTORY_REPO_USER=${env.SELI_ARTIFACTORY_REPO_USER}"
        - "--env SELI_ARTIFACTORY_REPO_PASS=${env.SELI_ARTIFACTORY_REPO_PASS}"
      cmd: mvn -T 1C ${env.MAVEN_CLI_OPTS} clean install -DskipTests=true -P-uber-jar

  # Run unit tests and jacoco coverage for SonarQube analysis
  test:
    - task: mvn-package
      docker-image: adp-maven-builder
      docker-in-docker: socket
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} clean install jacoco:prepare-agent

  test-without-integration-jar:
    - task: mvn-package
      docker-image: adp-maven-builder
      docker-in-docker: socket
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn -T 1C ${env.MAVEN_CLI_OPTS} clean install jacoco:prepare-agent -P-uber-jar

  sonar-enterprise-pcr:
    - task: generate-version-prefix
      cmd: cat VERSION_PREFIX > .bob/var.version-prefix
    - task: mvn-sonar-enterprise-sonarqube-analysis
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} sonar:sonar
        -Dsonar.login=${env.SONAR_AUTH_TOKEN}
        -Dsonar.host.url=${env.SONAR_HOST_URL}
        -Dsonar.pullrequest.key=${var.version-prefix}-${env.GERRIT_CHANGE_NUMBER}
        -Dsonar.pullrequest.base=${env.SONAR_BRANCH}
        -Dsonar.pullrequest.branch=${env.GERRIT_CHANGE_NUMBER}

  sonar-enterprise-release:
    - task: sonarqube-analysis
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} sonar:sonar
        -Dsonar.login=${env.SONAR_AUTH_TOKEN}
        -Dsonar.host.url=${env.SONAR_HOST_URL}
        -Dsonar.projectVersion=${var.version}

  # Build a docker image pointing to dirty repository
  image:
    - task: docker-build
      cmd: docker build ${env.PWD} ${env.DOCKER_NETWORK}
        --file Dockerfile
        --tag ${var.image-full-name-internal}:${var.version}
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        --build-arg COMMIT=${var.commithash}
        --build-arg APP_VERSION=${var.version}
        --build-arg JAR_FILE=eric-oss-pm-stats-calculator-${var.version}.jar
        --build-arg RSTATE=${var.rstate}
        --build-arg IMAGE_PRODUCT_NUMBER="${common.image-product-number}"
    - task: docker-build-integration
      cmd: docker build ${helm-integration-docker-dir} ${env.DOCKER_NETWORK}
        --file ${helm-integration-docker-dir}/Dockerfile
        --tag ${var.image-full-name-internal}-integration:${var.version}

  # Delete docker images created
  delete-images:
    - task: delete-internal-image
      cmd:
        - docker image remove ${var.image-full-name-internal}:${var.version} || true
        - docker image remove ${var.image-full-name-internal}-integration:${var.version} || true
    - task: delete-drop-image
      cmd: docker image remove ${image-full-name}:${var.version} || true
    - task: cleanup-anchore-trivy-images
      cmd:
        - docker image remove armdocker.rnd.ericsson.se/proj-adp-cicd-drop/hadolint-scan:${env.HADOLINT_TAG} $(docker images -f "dangling=true" -q) || true
        - docker image remove ${anchore-grype-image}:${env.ANCHORE_TAG} $(docker images -f "dangling=true" -q) || true
        - docker image remove ${trivy-image}:${env.TRIVY_TAG} $(docker images -f "dangling=true" -q) || true
        - docker image remove armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubesec:${env.KUBESEC_TAG} $(docker images -f "dangling=true" -q) || true
        - docker image remove armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubeaudit:${env.KUBEAUDIT_TAG} $(docker images -f "dangling=true" -q) || true
        - docker image remove armdocker.rnd.ericsson.se/proj-adp-cicd-drop/va-scan-kubehunter:${env.KUBEHUNTER_TAG} $(docker images -f "dangling=true" -q) || true
        - docker image remove ${image-to-scan} $(docker images -f "dangling=true" -q) || true

  # Check for image design rule compliance
  image-dr-check:
    - task: check-image-dr
      docker-image: adp-image-dr-check
      docker-in-docker: socket
      cmd: "image-dr-check
          --image ${var.image-full-name-internal}:${var.version}
          --output .bob/check-image/
          ${var.image-dr-vm-args}"

  # Replace placeholder values in repositories.yaml file
  update-repositories-file:
    - task: update-user-details
      cmd:
        - sed -i 's/{{ "SELI_ARTIFACTORY_REPO_USER" }}/'${env.SELI_ARTIFACTORY_REPO_USER}'/g;
                  s/{{ "SELI_ARTIFACTORY_REPO_PASS" }}/'${env.SELI_ARTIFACTORY_REPO_PASS}'/g' ${env.HELM_REPO_CREDENTIALS}
    - task: restore-user-details
      docker-image: adp-maven-builder
      cmd: git restore ${env.HELM_REPO_CREDENTIALS}

  # Push image to ci-internal repo and create local version of helm chart
  package-local-without-integration-jar:
    - task: image-push-internal
      cmd: docker push ${var.image-full-name-internal}:${var.version}
    - task: package-helm-internal
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder charts/${common.helm-chart-name}
        --workdir .bob --output .bob/${common.helm-chart-name}-internal
        --version ${var.version}
        --replace eric-product-info.yaml:VERSION=${var.version}
        --replace eric-product-info.yaml:REPO_PATH=${var.image-repopath-internal}

  package-local-integration:
    - task: image-push-internal-integration
      cmd: docker push ${var.image-full-name-internal}-integration:${var.version}
    - task: update-repositories-file:update-user-details
    - task: package-helm-internal-integration
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder charts/${common.helm-chart-name}-integration
        --workdir .bob --output .bob/${common.helm-chart-name}-internal-integration
        --version ${var.version}
        --replace eric-product-info.yaml:VERSION=${var.version}
        --replace eric-product-info.yaml:REPO_PATH=${var.image-repopath-internal}
        --helm-credentials ${env.HELM_REPO_CREDENTIALS}
    - task: update-repositories-file:restore-user-details

  # Push helm chart to internal repo
  helm-upload-internal:
    - task: helm-upload-internal
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: upload_file.sh
        --filename=.bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
        --repository=${var.helm-chart-repo-internal}/${common.helm-chart-name}
        --api-token=${env.SELI_ARTIFACTORY_REPO_PASS}

  package:
    - rule: package-without-integration-jar
    - rule: package-local-integration

  package-without-integration-jar:
    - rule: package-local-without-integration-jar
    - rule: helm-upload-internal

  package-jars:
    - task: mvn-upload-internal
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} clean deploy -DskipTests=true -P-uber-jar

  k8s-test:
    - rule: helm-dry-run
    - rule: namespace-precheck
    - rule: create-namespace
    - rule: helm-install-prep
    - rule: helm-install-service
    - rule: healthcheck
    - rule: helm-test
    - rule: kaas-info
    - rule: delete-namespace

  helm-dry-run:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: helm-dry-run
      docker-image: adp-helm-kubectl
      docker-flags: &docker_flags_kube_config
        - ${env.DOCKER_NETWORK}
        - "--env HOME=${env.HOME}"
        - "--env K8S_NAMESPACE=${env.K8S_NAMESPACE}"
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--env ENABLE_HELM_V3"
        - "--env HELM_VERSION"
        - "--env SELI_ARTIFACTORY_REPO_USER=${env.SELI_ARTIFACTORY_REPO_USER}"
        - "--env SELI_ARTIFACTORY_REPO_PASS=\"${env.SELI_ARTIFACTORY_REPO_PASS}\""
        - "--env COLLECT_LOGS_SCRIPT_LOCATION"
        - "--volume ${env.PWD}:${env.PWD}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}"
        - "--volume ${var.docker-config-basepath}:${var.docker-config-basepath}"
      cmd: helm install .bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
        --dry-run
        --debug
        --generate-name > helm-install-dry-run.log

  namespace-precheck:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: find-all-namespaces
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl get ns ${env.K8S_NAMESPACE} | awk '{if($1=="${env.K8S_NAMESPACE}") print $1};' > .bob/var.save-namespace || true
    - task: delete-namespace
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl delete namespace ${var.save-namespace} || true

  create-namespace:
    - rule: namespace-precheck
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: create-namespace
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create namespace ${env.K8S_NAMESPACE}

  helm-install-prep:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: create-namespace-if-not-exists
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create namespace ${env.K8S_NAMESPACE} || true
    - task: helm-install-prep
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create secret generic ${image-secret}
        --from-file=.dockerconfigjson=${env.DOCKER_CONFIG}
        --type=kubernetes.io/dockerconfigjson
        --namespace ${env.K8S_NAMESPACE} || true

  helm-install-service:
    - rule: helm-install-prep
    - task: helm-install-service
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm upgrade
        --install ${env.HELM_RELEASE} .bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
        -f ${helm-test-local-dir}/values-kpi-service-cluster.yaml
        --namespace ${env.K8S_NAMESPACE}
        --set eric-log-shipper.logshipper.autodiscover.namespace=${env.K8S_NAMESPACE}
        --set imageCredentials.pullSecret=${image-secret}
        --set imageCredentials.calculator.repoPath=${var.image-repopath-internal}
        --set global.pullSecret=${image-secret}
        --timeout ${env.HELM_INSTALL_TIMEOUT}
        --wait

    - task: wait-for-deployement-ready
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl rollout status deployment/eric-oss-pm-stats-calculator -n ${env.K8S_NAMESPACE} --timeout 600s

  helm-install-integration:
    - rule: helm-install-prep
    - task: helm-install-integration
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm upgrade
        --install ${env.HELM_RELEASE}-integration .bob/${common.helm-chart-name}-internal-integration/${common.helm-chart-name}-integration-${var.version}.tgz
        --namespace ${env.K8S_NAMESPACE}
        --set eric-log-shipper.logshipper.autodiscover.namespace=${env.K8S_NAMESPACE}
        --set imageCredentials.pullSecret=${image-secret}
        --set global.pullSecret=${image-secret}
        --timeout ${env.HELM_INSTALL_TIMEOUT}
        --wait

  helm-install-kgb:
    - rule: helm-install-prep
    - task: prepare-helm-repo
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd:
        - helm repo add ${common.helm-chart-name} ${helm-chart-release-repo} --username ${env.SELI_ARTIFACTORY_REPO_USER} --password ${env.SELI_ARTIFACTORY_REPO_PASS}
        - helm repo update
    - task: install-kgb-on-kubernetes
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm upgrade
        --install ${env.HELM_RELEASE} ${common.helm-chart-name}/${common.helm-chart-name}
        --namespace ${env.K8S_NAMESPACE}
        --set eric-log-shipper.logshipper.autodiscover.namespace=${env.K8S_NAMESPACE}
        --set imageCredentials.pullSecret=${image-secret}
        --timeout ${env.HELM_INSTALL_TIMEOUT}
        --wait
        --devel
    - rule: healthcheck

  helm-upgrade:
    - rule: helm-install-kgb
    - rule: helm-install-service

  healthcheck:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: healthcheck
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: ./healthcheck.sh

  helm-test:
    - rule: helm-install-prep
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: run-basic-tests
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm test ${env.HELM_RELEASE}
        --namespace ${env.K8S_NAMESPACE}
        --timeout ${env.HELM_TEST_TIMEOUT}
    - task: run-int-tests
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm test ${env.HELM_RELEASE}-integration
        --namespace ${env.K8S_NAMESPACE}
        --timeout ${env.HELM_TEST_INTEGRATION_TIMEOUT}

  kaas-info:
    - task: get-kaas-info
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd:
        - kubectl get nodes -o=jsonpath='{.items[0].metadata.labels.kaas/version}' > .bob/var.kaas-version
        - kubectl config current-context > .bob/var.kaas-current-context
    - task: output-kaas-info
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd:
        - echo -e '# KaaS Version:' >> ${env.KAAS_INFO_FILE} >> ${env.KAAS_INFO_FILE}
        - kubectl get nodes -o=jsonpath='{.items[0].metadata.labels.kaas/version}' >> ${env.KAAS_INFO_FILE}
        - echo -e '\n\n# CCD Version:' >> ${env.KAAS_INFO_FILE} >> ${env.KAAS_INFO_FILE}
        - kubectl get nodes -o=jsonpath='{.items[0].metadata.labels.erikube/version}' >> ${env.KAAS_INFO_FILE}
        - echo -e '\n\n# KaaS Release Information:' >> ${env.KAAS_INFO_FILE}
        - echo -e "Ericsson Web Services - https://ews.rnd.gic.ericsson.se/cd.php?cluster=${var.kaas-current-context}" >> ${env.KAAS_INFO_FILE}
        - echo -e "KaaS release information - https://confluence.lmera.ericsson.se/display/AD/${var.kaas-version}" >> ${env.KAAS_INFO_FILE}
        - echo -e '\n# Kubectl Version:' >> ${env.KAAS_INFO_FILE}
        - kubectl version >> ${env.KAAS_INFO_FILE}
        - echo -e '\n# Kubectl Cluster Info:' >> ${env.KAAS_INFO_FILE} >> ${env.KAAS_INFO_FILE}
        - kubectl cluster-info | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g' >> ${env.KAAS_INFO_FILE}
        - echo -e '\n# Kubectl Config Context:' >> ${env.KAAS_INFO_FILE} >> ${env.KAAS_INFO_FILE}
        - kubectl config get-contexts >> ${env.KAAS_INFO_FILE}
        - echo -e '\n# Helm Version:' >> ${env.KAAS_INFO_FILE}
        - helm version >> ${env.KAAS_INFO_FILE}

  delete-namespace:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: delete-release
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm delete ${env.HELM_RELEASE} --namespace ${env.K8S_NAMESPACE} || true
    - task: delete-namespace
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl delete namespace ${env.K8S_NAMESPACE}

  # Publish docker images and helm charts to drop repository
  # Call publish only when merged to master
  publish:
    - task: package-helm-public
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder charts/${common.helm-chart-name}
        --workdir .bob --output build
        --version ${var.version}
        --replace eric-product-info.yaml:VERSION=${var.version}
        --replace eric-product-info.yaml:REPO_PATH=${var.image-repopath-drop}
    - task: image-pull-internal
      cmd: docker pull ${var.image-full-name-internal}:${var.version}
    - task: image-tag-public
      cmd: docker tag ${var.image-full-name-internal}:${var.version} ${image-full-name}:${var.version}
    - task: image-push-public
      cmd: docker push ${image-full-name}:${var.version}
    - rule: publish-oas
    - rule: publish-jars
    - task : helm-upload-to-release-repo
      docker-image : adp-release-auto
      docker-flags :
        - "--env ENABLE_HELM_V3=true"
      cmd : upload_file.sh
        --filename=build/${common.helm-chart-name}-${var.version}.tgz
        --repository=${helm-chart-release-repo}/${common.helm-chart-name}
        --api-token=${env.SELI_ARTIFACTORY_REPO_PASS}

  # Publish OpenAPI specs to Generic drop repository
  publish-oas:
    - task: upload-open-api-specs
      docker-image: adp-helm-kubectl
      docker-flags:
        - "--env OPEN_API_SPEC_DIRECTORY=${env.OPEN_API_SPEC_DIRECTORY}"
      cmd:
        bash -c 'for oas in ${env.OPEN_API_SPEC_DIRECTORY}/*openapi.yaml; do
          if [ -f $oas ]; then
            curl -X PUT -T $oas ${generic-drop-repo}-local/${common.helm-chart-name}/${var.version}/$(basename -- $oas) -u ${env.SELI_ARTIFACTORY_REPO_USER}:${env.SELI_ARTIFACTORY_REPO_PASS};
          fi
        done'

  publish-jars:
    - task: mvn-upload
      docker-image: adp-maven-builder
      docker-in-docker: socket
      docker-flags:
        - ${env.DOCKER_VOLUME_MAPPING_PASSWD}
        - "--volume /etc/ssh:/etc/ssh"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume ${env.PROJ_MVN}:/proj/mvn"
        - ${env.DOCKER_NETWORK}
        - "--env SELI_ARTIFACTORY_REPO_USER=${env.SELI_ARTIFACTORY_REPO_USER}"
        - "--env SELI_ARTIFACTORY_REPO_PASS=\"${env.SELI_ARTIFACTORY_REPO_PASS}\""
        - "--env MAVEN_OPTS"
      cmd:
        - git checkout master
        - mvn ${env.MAVEN_CLI_OPTS} -Dmaven.javadoc.skip=true -DskipTests=true -P-uber-jar clean deploy

  helm-chart-check-report-warnings:
    - task: helm-chart-check-report-warnings
      cmd:
        - if grep -q ">WARNING<" .bob/design-rule-check-report.xml; then
            echo true > .bob/var.helm-chart-check-report-warnings;
          else
            echo false > .bob/var.helm-chart-check-report-warnings;
          fi

  collect-k8s-logs:
    - task: collect-logs-using-script
      docker-image: adp-helm-kubectl
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3"
        - "--env HOME=${env.HOME}"
        - "--env K8S_NAMESPACE=${env.K8S_NAMESPACE}"
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--env HELM_VERSION"
        - "--env SERO_ARTIFACTORY_REPO_USER=${env.SERO_ARTIFACTORY_REPO_USER}"
        - "--env SERO_ARTIFACTORY_REPO_PASS=\"${env.SERO_ARTIFACTORY_REPO_PASS}\""
        - "--env COLLECT_LOGS_SCRIPT_LOCATION"
        - "--env COLLECT_LOGS_SCRIPT_FILE_NAME"
        - "--env COLLECT_LOGS_SINCE_RELATIVE_TIME"
        - "--env COLLECT_LOGS_DIR"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}"
      cmd:
        - mkdir -p ${env.COLLECT_LOGS_DIR}
        - kubectl config view > ${env.COLLECT_LOGS_DIR}/kubectl.config
        - kubectl get ns > ${env.COLLECT_LOGS_DIR}/kubectl-get-ns.log
        - helm ls -Aa > ${env.COLLECT_LOGS_DIR}/helm-ls-Aa.log
        - printenv | grep -v CREDENTIALS | grep -v ARTIFACTORY > ${env.COLLECT_LOGS_DIR}/printenv.log
        # TODO: Fetch online ${env.COLLECT_LOGS_SCRIPT_FILE_NAME} and delete mv.. command if they re-enabled pod describe step
        # - curl -u ${env.SERO_ARTIFACTORY_REPO_USER}:${env.SERO_ARTIFACTORY_REPO_PASS} ${env.COLLECT_LOGS_SCRIPT_LOCATION}/${env.COLLECT_LOGS_SCRIPT_FILE_NAME} > ${env.COLLECT_LOGS_DIR}/${env.COLLECT_LOGS_SCRIPT_FILE_NAME}
        - mv ./ci/${env.COLLECT_LOGS_SCRIPT_FILE_NAME} ${env.COLLECT_LOGS_DIR}
        - chmod 777 ${env.COLLECT_LOGS_DIR}/${env.COLLECT_LOGS_SCRIPT_FILE_NAME}
        - sh -c "cd ${env.COLLECT_LOGS_DIR} && ./${env.COLLECT_LOGS_SCRIPT_FILE_NAME} ${env.K8S_NAMESPACE} ${env.COLLECT_LOGS_SINCE_RELATIVE_TIME}"

  generate-mvn-dep-tree:
    - task: mvn-dep-tree
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd:
        - bash -c "mvn ${env.MAVEN_CLI_OPTS} dependency:tree -DoutputFile=${env.PWD}/build/dep_tree.txt -DappendOutput=true && sed -i 's/${var.version}/${var.pom-version}/g' ${env.PWD}/build/dep_tree.txt"

  3pp-analysis:
    - rule: fossa-analyze
    - rule: fossa-scan-status-check
    - rule: fetch-fossa-report-attribution
    - rule: dependencies-update
    - rule: dependencies-enrich

  # fossa analyze stage
  fossa-analyze:
    - task: fossa-analyze
      docker-image: adp-maven-builder
      docker-flags:
        - ${docker-params}
        - "--env FOSSA_API_KEY=${env.FOSSA_API_KEY}"
        - "--env MAVEN_OPTS=${env.MAVEN_OPTS}"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume ${env.PROJ_MVN}:/proj/mvn"
      cmd:
        fossa analyze --revision ${var.version} --team ${fossa-team-name} --endpoint ${fossa-server-endpoint} --project ${fossa-project-name}

  # fossa scan status stage
  fossa-scan-status-check:
    - task: fossa-scan-status-check
      docker-image: adp-release-auto
      docker-flags:
        - "--env FOSSA_API_KEY=${env.FOSSA_API_KEY}"
      cmd: fossa_scan_status_check -s ${fossa-server-endpoint} -f custom -p ${fossa-project-name} -r ${var.version} -t ${env.FOSSA_API_KEY} -dl 15

  # New attribution format
  fetch-fossa-report-attribution:
    - task: fetch-fossa-report-attribution
      docker-image: adp-maven-builder
      docker-flags:
        - "--env FOSSA_API_KEY=${env.FOSSA_API_KEY}"
      cmd: fossa report attribution
            --endpoint ${fossa-server-endpoint}
            --project ${fossa-project-name}
            --revision ${var.version} --json > ${fossa-report-name}

  dependencies-update:
    - task: update-without-scan-scas
      description: Converts the FOSSA Report into a YAML file. No details are filled.
      docker-image: adp-release-auto
      cmd:
        - dependencies update
          --fossa-report ${fossa-report-name}
          --dependencies ${common.ci-artifacts-directory}/dependencies-3pp.yaml
          --link-dependencies
          --sort || true
          --transform-components
    - task: update-scan-scas
      description: Converts the FOSSA Report into a YAML file. A scan in Scas is performed to fill details about each dependency.
      docker-image: adp-release-auto
      cmd:
        - dependencies update
          --fossa-report ${fossa-report-name}
          --dependencies ${common.ci-artifacts-directory}/dependencies-3pp.yaml
          --scan-scas
          --scas-refresh-token ${env.SCAS_TOKEN}
          --link-dependencies
          --sort || true
          --transform-components

  dependencies-enrich:
    - task: enrich
      description: Enriches a YAML file with information avaliable in a manually filled YAML filled.
      docker-image: adp-release-auto
      cmd:
        - dependencies enrich
          --dependencies ${common.ci-artifacts-directory}/dependencies-3pp.yaml
          --secondary-dependencies-file ${common.dependencies-files-folder}/dependencies-metadata.yaml
          --output-name ${common.ci-artifacts-directory}/dependencies-3pp.yaml
          --partial
          --sort

  dependencies-validate:
    - task: bypass-esw4
      description: Validate the final file ignoring ESW4 Primary 3PP.
      docker-image: adp-release-auto
      cmd:
        - dependencies validate
          --dependencies ${common.ci-artifacts-directory}/dependencies-3pp.yaml
          --allow-esw4
    - rule: compare-dependencies-files

  compare-dependencies-files:
    - task: compare-files
      description: Check if both files are equal. If they aren't, the latest file needs to overwrite the older version.
      docker-image: adp-release-auto
      cmd: compare_two_yaml_files ${common.dependencies-files-folder}/dependencies-3pp.yaml ${common.ci-artifacts-directory}/dependencies-3pp.yaml

  validate-sdk:
    - task: check-sdk
      docker-image: sdk-validator
      cmd: validate-sdk --proj-sdk-dir ${env.PWD}/sdk-docs

  # VA scanner tools:
  hadolint-scan:
    - task: hadolint-scan-test
      docker-image: hadolint-scan
      docker-flags:
        - "--workdir /app/"
        - "-v ${env.PWD}/config/hadolint_config.yaml:/config/hadolint_config.yaml"
        - "-v ${env.PWD}/Dockerfile:/Dockerfile"
        - "-v ${env.PWD}/build/va-reports/hadolint-scan:/tmp/reports/"
      cmd: "-p ${common.helm-chart-name} -f /Dockerfile -c /config/hadolint_config.yaml; echo $? > .bob/var.resultcode_hadolint_check"

  evaluate-design-rule-check-resultcodes:
    - task: hadolint-result-check
      cmd: sh -c '
        if [ ${var.resultcode_hadolint_check} -ne 0 ]; then
        echo "Failure in hadolint checker";
        exit ${var.resultcode_hadolint_check};
        fi ;'

  kubehunter-scan:
    - task: get-config
      cmd: cp -v .kube/config  ${env.PWD}/config/config
    - task: kubehunter-scan-test
      docker-image: va-scan-kubehunter
      docker-flags:
        - "--workdir /opt/kubehunter/"
        - ${env.DOCKER_VOLUME_MAPPING_PASSWD}
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}:ro"
        - "-v ${env.PWD}/config:/opt/kubehunter/conf"
        - "-v ${env.PWD}/build/va-reports/kubehunter-report/:/tmp/reports"
      cmd: " "

  kube-audit:
    - task: helm-template
      docker-image: adp-release-auto
      cmd: "helm template .bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz --output-dir=.bob/helm_src"
    - task: kube-audit-test
      docker-image: va-scan-kubeaudit
      docker-flags:
        - "--workdir /opt/va-scan-kubeaudit/"
        - "-v ${env.PWD}/config:/opt/va-scan-kubeaudit/conf"
        - "-v ${env.PWD}/build/va-reports/kube-audit-report/:/tmp/reports"
        - "-v ${env.PWD}/.bob/helm_src:/tmp/src"
      cmd: " "
    - task: va-report-cmd
      cmd: echo "${var.va-report-cmd}
        --kubeaudit-reports ${env.PWD}/build/va-reports/kube-audit-report" > .bob/var.va-report-cmd

  kubesec-scan:
    - task: helm-template
      docker-image: va-scan-kubesec
      cmd: "helm template .bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz --output-dir=.bob/helm_kubesec"
    - task: remove-files-not-for-scanning
      cmd:
        - rm -rf .bob/helm_kubesec/${common.helm-chart-name}/templates/tests
        - rm -rf .bob/helm_kubesec/${common.helm-chart-name}/templates/hpa.yaml
        - rm -rf .bob/helm_kubesec/${common.helm-chart-name}/templates/rolebinding.yaml
    - task: kubesec-scan-test
      docker-image: va-scan-kubesec
      docker-flags:
        - "--workdir /opt/va-scan-kubesec/"
        - "-v ${env.PWD}/config:/opt/va-scan-kubesec/conf"
        - "-v ${env.PWD}/build/va-reports/kubesec-reports/:/tmp/reports"
        - "-v ${env.PWD}/.bob/helm_kubesec/:/tmp/src"
      cmd: " "
    - task: va-report-cmd
      cmd: echo "${var.va-report-cmd}
        --kubesec-reports ${env.PWD}/build/va-reports/kubesec-reports" > .bob/var.va-report-cmd

  trivy-inline-scan:
    - task: fetch-image
      cmd:
        - "docker pull ${image-to-scan}"
        - mkdir -p build/va-reports/trivy-reports
    - task: trivy-inline-scan-console-report
      docker-image: trivy-inline-scan
      docker-in-docker: socket
      docker-flags:
        - ${env.DOCKER_NETWORK}
      cmd: ${image-to-scan}
    - task: trivy-inline-scan-json-report
      docker-image: trivy-inline-scan
      docker-in-docker: socket
      docker-flags:
        - ${env.DOCKER_NETWORK}
      cmd: --format json --output build/va-reports/trivy-reports/trivy.report.json ${image-to-scan}
    - task: va-report-cmd
      cmd: echo "${var.va-report-cmd}
        --trivy-reports ${env.PWD}/build/va-reports/trivy-reports" > .bob/var.va-report-cmd

  fetch-xray-report:
    - task: fetch-xray-report
      docker-image: adp-release-auto
      cmd: bash -c 'fetch-xray
        --config ${env.PWD}/config/xray_report.config
        --debug
        --user ${env.XRAY_USER}
        --apikey ${env.XRAY_APIKEY}
        --output ${env.PWD}/build/va-reports/xray-reports/xray_report.json
        --set artifactory-subpath=${project-subpath}
        --set image=${common.docker-image-name}
        --set version=${var.version}
        --raw-output ${env.PWD}/build/va-reports/xray-reports/raw_xray_report.json'
    - task: va-report-cmd
      cmd: echo "${var.va-report-cmd}
        --xray-report ${env.PWD}/build/va-reports/xray-reports/xray_report.json
        --raw-xray-report ${env.PWD}/build/va-reports/xray-reports/raw_xray_report.json" > .bob/var.va-report-cmd

  anchore-grype-scan:
    - task: fetch-image
      cmd: "docker pull ${image-to-scan}"
    - task: anchore-grype-scan
      docker-image: grype-scan
      docker-in-docker: socket
      docker-flags:
        - ${env.DOCKER_NETWORK}
      cmd: grype_scan
        --db-url "https://toolbox-data.anchore.io/grype/databases/listing.json"
        --image ${image-to-scan}
        --report-dir build/va-reports/anchore-reports
    - task: va-report-cmd
      cmd: echo "${var.va-report-cmd}
        --anchore-reports ${env.PWD}/build/va-reports/anchore-reports" > .bob/var.va-report-cmd

  # Fetch vulnerabililty report VA 2.0
  generate-VA-report-V2:
    - task: no-upload
      docker-image: adp-release-auto
      docker-flags:
        - --env VHUB_API_TOKEN
      cmd: bash -c "${var.va-report-cmd}; echo \$? > .bob/var.va-report-exit-code"
    # irrelevant until qS is not registered in VHUB
    # - task: upload
    #   docker-image: adp-release-auto
    #   docker-flags:
    #     - --env VHUB_API_TOKEN
    #   cmd: bash -c '${var.va-report-cmd} --upload-scan-results'; exit 0;
    - task: analyze-va-result
      docker-image: adp-release-auto
      cmd: python3 ci/scripts/va_report_analyzer.py
        --config ${env.PWD}/config/va-report.config
        --report ${env.PWD}/build/va-reports/Vulnerability_Report_2.0.md
        --exit-code ${var.va-report-exit-code}
        --verbose

  # Create and push git tag. Example v1.0.0-55
  create-git-tag:
    - task: set-push-url
      cmd: git remote set-url --push origin ssh://gerrit-gamma.gic.ericsson.se:29418/${git-repo-path}
    - task: git-tag
      docker-image: adp-release-auto
      docker-flags:
        - --env GERRIT_USERNAME
        - --env GERRIT_PASSWORD
      cmd: version-handler create-git-tag
        --git-repo-url ${git-repo-url}
        --tag ${var.version}
        --message "Release ${var.version}"

  move-reports:
    - task: fossa-reports
      cmd: if [ -f "${env.PWD}/${common.ci-artifacts-directory}/dependencies-3pp.yaml" ]; then mkdir -p ${env.PWD}/build/fossa; cp ${common.ci-artifacts-directory}/dependencies-3pp.yaml build/fossa/; fi || true;